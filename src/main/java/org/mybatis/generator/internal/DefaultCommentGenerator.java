/**
 * Copyright 2006-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.mybatis.generator.internal;

import static org.mybatis.generator.internal.util.StringUtility.isTrue;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import org.mybatis.generator.api.CommentGenerator;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.CompilationUnit;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.InnerClass;
import org.mybatis.generator.api.dom.java.InnerEnum;
import org.mybatis.generator.api.dom.java.Interface;
import org.mybatis.generator.api.dom.java.JavaElement;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.Parameter;
import org.mybatis.generator.api.dom.java.TopLevelClass;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.config.MergeConstants;
import org.mybatis.generator.config.PropertyRegistry;
import org.mybatis.generator.internal.util.StringUtility;

/**
 * The Class DefaultCommentGenerator.
 *
 * @author Jeff Butler
 */
public class DefaultCommentGenerator implements CommentGenerator {

    /** The properties. */
    private Properties properties;

    /** The suppress date. */
    private boolean suppressDate;

    /** The suppress all comments. */
    private boolean suppressAllComments;

    /**
     * The addition of table remark's comments.
     * If suppressAllComments is true, this option is ignored
     */
    private boolean addRemarkComments;

    private SimpleDateFormat dateFormat;

    private Properties systemPro;

    private String currentDateStr;

    /**
     * Instantiates a new default comment generator.
     */
    public DefaultCommentGenerator() {
        super();
        properties = new Properties();
        suppressDate = false;
        suppressAllComments = false;
        addRemarkComments = false;
        currentDateStr = (new SimpleDateFormat("yyyy-MM-dd")).format(new Date());
        systemPro = System.getProperties();

    }

    @Override
    public void addJavaFileComment(CompilationUnit compilationUnit) {
        // add no file level comments by default
    }

    @Override
    public void addComment(XmlElement xmlElement) {
        //if (suppressAllComments) {
        //    return;
        //}
        //
        //xmlElement.addElement(new TextElement("<!--"));
        //
        //StringBuilder sb = new StringBuilder();
        //sb.append("  WARNING - ");
        //sb.append(MergeConstants.NEW_ELEMENT_TAG);
        //xmlElement.addElement(new TextElement(sb.toString()));
        //xmlElement.addElement(new TextElement(
        //        "  This element is automatically generated by MyBatis Generator, do not modify."));
        //
        //String s = getDateString();
        //if (s != null) {
        //    sb.setLength(0);
        //    sb.append("  This element was generated on ");
        //    sb.append(s);
        //    sb.append('.');
        //    xmlElement.addElement(new TextElement(sb.toString()));
        //}
        //
        //xmlElement.addElement(new TextElement("-->"));
    }

    @Override
    public void addRootComment(XmlElement rootElement) {
        // add no document level comments by default
    }

    @Override
    public void addConfigurationProperties(Properties properties) {
        this.properties.putAll(properties);

        suppressDate = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_DATE));

        suppressAllComments = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS));

        addRemarkComments = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_ADD_REMARK_COMMENTS));

        String dateFormatString = properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_DATE_FORMAT);
        if (StringUtility.stringHasValue(dateFormatString)) {
            dateFormat = new SimpleDateFormat(dateFormatString);
        }
    }

    /**
     * This method adds the custom javadoc tag for. You may do nothing if you do not wish to include the Javadoc tag -
     * however, if you do not include the Javadoc tag then the Java merge capability of the eclipse plugin will break.
     *
     * @param javaElement       the java element
     * @param markAsDoNotDelete the mark as do not delete
     */
    protected void addJavadocTag(JavaElement javaElement, boolean markAsDoNotDelete) {
        javaElement.addJavaDocLine(" *");
        StringBuilder sb = new StringBuilder();
        sb.append(" * ");
        sb.append(MergeConstants.NEW_ELEMENT_TAG);
        if (markAsDoNotDelete) {
            sb.append(" do_not_delete_during_merge");
        }
        String s = getDateString();
        if (s != null) {
            sb.append(' ');
            sb.append(s);
        }
        javaElement.addJavaDocLine(sb.toString());
    }

    /**
     * This method returns a formated date string to include in the Javadoc tag
     * and XML comments. You may return null if you do not want the date in
     * these documentation elements.
     *
     * @return a string representing the current timestamp, or null
     */
    protected String getDateString() {
        if (suppressDate) {
            return null;
        } else if (dateFormat != null) {
            return dateFormat.format(new Date());
        } else {
            return new Date().toString();
        }
    }

    @Override
    public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable) {
        if (suppressAllComments) {
            return;
        }

        StringBuilder sb = new StringBuilder();

        innerClass.addJavaDocLine("/**");
        innerClass.addJavaDocLine(" * This class was generated by MyBatis Generator.");

        sb.append(" * This class corresponds to the database table ");
        sb.append(introspectedTable.getFullyQualifiedTable());
        innerClass.addJavaDocLine(sb.toString());

        addJavadocTag(innerClass, false);

        innerClass.addJavaDocLine(" */");
    }

    @Override
    public void addModelClassComment(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        if (suppressAllComments || !addRemarkComments) {
            return;
        }

        StringBuilder sb = new StringBuilder();

        topLevelClass.addJavaDocLine("/**");

        String remarks = introspectedTable.getRemarks();
        if (addRemarkComments && StringUtility.stringHasValue(remarks)) {
            topLevelClass.addJavaDocLine(" * Database Table Remarks:");
            String[] remarkLines = remarks.split(System.getProperty("line.separator"));
            for (String remarkLine : remarkLines) {
                topLevelClass.addJavaDocLine(" *   " + remarkLine);
            }
        }
        topLevelClass.addJavaDocLine(" *");

        topLevelClass.addJavaDocLine(" * This class was generated by MyBatis Generator.");

        sb.append(" * This class corresponds to the database table ");
        sb.append(introspectedTable.getFullyQualifiedTable());
        topLevelClass.addJavaDocLine(sb.toString());

        addJavadocTag(topLevelClass, true);

        topLevelClass.addJavaDocLine(" */");
    }

    @Override
    public void addEnumComment(InnerEnum innerEnum, IntrospectedTable introspectedTable) {
        if (suppressAllComments) {
            return;
        }

        StringBuilder sb = new StringBuilder();

        innerEnum.addJavaDocLine("/**");
        innerEnum.addJavaDocLine(" * This enum was generated by MyBatis Generator.");

        sb.append(" * This enum corresponds to the database table ");
        sb.append(introspectedTable.getFullyQualifiedTable());
        innerEnum.addJavaDocLine(sb.toString());

        addJavadocTag(innerEnum, false);

        innerEnum.addJavaDocLine(" */");
    }

    @Override
    public void addFieldComment(Field field, IntrospectedTable introspectedTable,
                                IntrospectedColumn introspectedColumn) {
        if (suppressAllComments) {
            return;
        }

        StringBuilder sb = new StringBuilder();
        field.addJavaDocLine("/**");
        sb.append(" * ");
        sb.append(introspectedColumn.getRemarks());
        field.addJavaDocLine(sb.toString().replace("\n", " "));
        field.addJavaDocLine(" */");
    }

    @Override
    public void addFieldComment(Field field, IntrospectedTable introspectedTable) {
        if (suppressAllComments) {
            return;
        }

        StringBuilder sb = new StringBuilder();
        field.addJavaDocLine("/**");
        sb.append(" * ");
        sb.append(introspectedTable.getFullyQualifiedTable());
        field.addJavaDocLine(sb.toString().replace("\n", " "));
        field.addJavaDocLine(" */");
    }

    @Override
    public void addGeneralMethodComment(Method method, IntrospectedTable introspectedTable) {
        if (suppressAllComments) {
            return;
        }

        StringBuilder sb = new StringBuilder();
        method.addJavaDocLine("/**");
        sb.append(" * ");
        if (method.isConstructor()) {
            sb.append(" 构造查询条件");
        }
        String methodName = method.getName();
        if ("setOrderByClause".equals(methodName)) {
            sb.append("设置排序字段");
        } else if ("setDistinct".equals(methodName)) {
            sb.append("设置过滤重复数据");
        } else if ("getOredCriteria".equals(methodName)) {
            sb.append("获取当前的查询条件实例");
        } else if ("isDistinct".equals(methodName)) {
            sb.append("是否过滤重复数据");
        } else if ("getOrderByClause".equals(methodName)) {
            sb.append("获取排序字段");
        } else if ("createCriteria".equals(methodName)) {
            sb.append("创建一个查询条件");
        } else if ("createCriteriaInternal".equals(methodName)) {
            sb.append("内部构建查询条件对象");
        } else if ("clear".equals(methodName)) {
            sb.append("清除查询条件");
        } else if ("countByExample".equals(methodName)) {
            sb.append("根据指定的条件获取数据库记录数");
        } else if ("deleteByExample".equals(methodName)) {
            sb.append(" 根据指定的条件删除数据库符合条件的记录");
        } else if ("deleteByPrimaryKey".equals(methodName)) {
            sb.append(" 根据主键删除数据库的记录");
        } else if ("insert".equals(methodName)) {
            sb.append(" 新写入数据库记录");
        } else if ("insertSelective".equals(methodName)) {
            sb.append(" 动态字段,写入数据库记录");
        } else if ("selectByExample".equals(methodName)) {
            sb.append(" 根据指定的条件查询符合条件的数据库记录");
        } else if ("selectByPrimaryKey".equals(methodName)) {
            sb.append(" 根据指定主键获取一条数据库记录");
        } else if ("updateByExampleSelective".equals(methodName)) {
            sb.append(" 动态根据指定的条件来更新符合条件的数据库记录");
        } else if ("updateByExample".equals(methodName)) {
            sb.append(" 根据指定的条件来更新符合条件的数据库记录");
        } else if ("updateByPrimaryKeySelective".equals(methodName)) {
            sb.append(" 动态字段,根据主键来更新符合条件的数据库记录");
        } else if ("updateByPrimaryKey".equals(methodName)) {
            sb.append(" 根据主键来更新符合条件的数据库记录");
        } else if ("selectByExampleWithBLOBs".equals(methodName)) {
            sb.append(" 根据指定的条件查询符合条件的数据库记录,带大字段");
        } else if ("updateByExampleWithBLOBs".equals(methodName)) {
            sb.append(" 动态根据指定的条件来更新符合条件的数据库记录,带大字段");
        } else if ("updateByPrimaryKeyWithBLOBs".equals(methodName)) {
            sb.append(" 根据主键来更新符合条件的数据库记录,带大字段");
        }
        sb.append(":");
        sb.append(introspectedTable.getFullyQualifiedTable());
        method.addJavaDocLine(sb.toString());

        final List<Parameter> parameterList = method.getParameters();
        if (!parameterList.isEmpty()) {
            method.addJavaDocLine(" *");
            if ("or".equals(methodName)) {
                sb.append(" 增加或者的查询条件,用于构建或者查询");
            }
        } else {
            if ("or".equals(methodName)) {
                sb.append(" 创建一个新的或者查询条件");
            }
        }
        String paramterName;
        for (Parameter parameter : parameterList) {
            sb.setLength(0);
            sb.append(" * @param ");
            paramterName = parameter.getName();
            sb.append(paramterName);
            if ("orderByClause".equals(paramterName)) {
                sb.append(" 排序字段");
            } else if ("distinct".equals(paramterName)) {
                sb.append(" 是否过滤重复数据");
            } else if ("criteria".equals(paramterName)) {
                sb.append(" 过滤条件实例");
            } else if ("record".equals(paramterName)) {
                sb.append(" 实体对象");
            } else if ("example".equals(paramterName)) {
                sb.append(" example");
            } else if ("liushuihao".equals(paramterName)) {
                sb.append(" 流水号");
            }
            method.addJavaDocLine(sb.toString());
        }

        if ("countByExample".equals(methodName)) {
            method.addJavaDocLine(" * @return 记录数");
        } else if ("deleteByExample".equals(methodName)) {
            method.addJavaDocLine(" * @return 影响行数");
        } else if ("deleteByPrimaryKey".equals(methodName)) {
            method.addJavaDocLine(" * @return 影响行数");
        } else if ("insert".equals(methodName)) {
            method.addJavaDocLine(" * @return 影响行数");
        } else if ("insertSelective".equals(methodName)) {
            method.addJavaDocLine(" * @return 影响行数");
        } else if ("selectByExample".equals(methodName)) {
            method.addJavaDocLine(" * @return 实体集合");
        } else if ("selectByPrimaryKey".equals(methodName)) {
            method.addJavaDocLine(" * @return 实体");
        } else if ("updateByExampleSelective".equals(methodName)) {
            method.addJavaDocLine(" * @return 影响行数");
        } else if ("updateByExample".equals(methodName)) {
            method.addJavaDocLine(" * @return 影响行数");
        } else if ("updateByPrimaryKeySelective".equals(methodName)) {
            method.addJavaDocLine(" * @return 影响行数");
        } else if ("updateByPrimaryKey".equals(methodName)) {
            method.addJavaDocLine(" * @return 影响行数");
        } else if ("updateByExampleWithBLOBs".equals(methodName)) {
            method.addJavaDocLine(" * @return 影响行数");
        } else if ("updateByPrimaryKeyWithBLOBs".equals(methodName)) {
            method.addJavaDocLine(" * @return 影响行数");
        }

        method.addJavaDocLine(" */");
    }

    @Override
    public void addGetterComment(Method method, IntrospectedTable introspectedTable,
                                 IntrospectedColumn introspectedColumn) {
        if (suppressAllComments) {
            return;
        }

        method.addJavaDocLine("/**");
        StringBuilder sb = new StringBuilder();
        sb.append(" * ");
        sb.append(introspectedColumn.getRemarks());
        method.addJavaDocLine(sb.toString().replace("\n", " "));
        sb.setLength(0);
        sb.append(" * @return ");
        sb.append(introspectedColumn.getActualColumnName());
        sb.append(" ");
        sb.append(introspectedColumn.getRemarks());
        method.addJavaDocLine(sb.toString().replace("\n", " "));
        method.addJavaDocLine(" */");
    }

    @Override
    public void addSetterComment(Method method, IntrospectedTable introspectedTable,
                                 IntrospectedColumn introspectedColumn) {
        if (suppressAllComments) {
            return;
        }

        method.addJavaDocLine("/**");
        StringBuilder sb = new StringBuilder();
        sb.append(" * ");
        sb.append(introspectedColumn.getRemarks());
        method.addJavaDocLine(sb.toString().replace("\n", " "));
        Parameter parm = method.getParameters().get(0);
        sb.setLength(0);
        sb.append(" * @param ");
        sb.append(parm.getName());
        sb.append(" ");
        sb.append(introspectedColumn.getRemarks());
        method.addJavaDocLine(sb.toString().replace("\n", " "));
        method.addJavaDocLine(" */");
    }

    @Override
    public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable, boolean markAsDoNotDelete) {
        if (suppressAllComments) {
            return;
        }
        innerClass.addJavaDocLine("/**");
        innerClass.addJavaDocLine(" * Copyright (c) 2018 Choice, Inc.");
        innerClass.addJavaDocLine(" * All Rights Reserved.");
        innerClass.addJavaDocLine(" * Choice Proprietary and Confidential.");
        innerClass.addJavaDocLine(" * ");
        innerClass.addJavaDocLine(" * " + introspectedTable.getFullyQualifiedTable() + " 表的实体类");
        innerClass.addJavaDocLine(" * ");
        innerClass.addJavaDocLine(" * @author : " + systemPro.getProperty("user.name"));
        innerClass.addJavaDocLine(" * @since : " + currentDateStr);
        innerClass.addJavaDocLine(" */");
    }

    @Override
    public void addJavaDaoComment(Interface interfaze, IntrospectedTable introspectedTable) {
        interfaze.addJavaDocLine("/**");
        interfaze.addJavaDocLine(" * Copyright (c) 2018 Choice, Inc.");
        interfaze.addJavaDocLine(" * All Rights Reserved.");
        interfaze.addJavaDocLine(" * Choice Proprietary and Confidential.");
        interfaze.addJavaDocLine(" * ");
        interfaze.addJavaDocLine(" * " + introspectedTable.getFullyQualifiedTable() + " 表的java client");
        interfaze.addJavaDocLine(" * ");
        interfaze.addJavaDocLine(" * @author : " + systemPro.getProperty("user.name"));
        interfaze.addJavaDocLine(" * @since : " + currentDateStr);
        interfaze.addJavaDocLine(" */");
    }
}
